<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fantasy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-02-01T15:17:35.959Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Cellar Cordial</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2025/01/31/Render%20Hardware%20Interface/"/>
    <id>http://example.com/2025/01/31/Render%20Hardware%20Interface/</id>
    <published>2025-01-31T14:48:17.152Z</published>
    <updated>2025-02-01T15:17:35.959Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Render Hardware Interface（RHI）简单来说就是一个抽象层，它位于游戏引擎或图形应用和底层图形API（比如DirectX、Vulkan、Metal等）之间，主要作用就是让开发者不用直接去碰那些复杂又容易出错的底层API，而是通过一个统一的接口去操作GPU，同时可以更方便地支持跨平台运行。这里主要参考 nvrhi 来构建一个支持 dx12 和 vulkan 的 RHI.</p><h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p><a class="magnific-img" href="https://github.com/CellarCordial/CellarCordial.github.io/blob/master/images/Render%20Hardware%20Interface/0.png?raw=true"><img src="https://github.com/CellarCordial/CellarCordial.github.io/blob/master/images/Render%20Hardware%20Interface/0.png?raw=true" alt="0.png" class="ui centered image"></a></p><p>根据图形管线的每个阶段, 我们分别建立相应的接口或数据结构.</p><h3 id="Input-Assembler-Vertex-Input"><a href="#Input-Assembler-Vertex-Input" class="headerlink" title="Input Assembler (Vertex Input)"></a>Input Assembler (Vertex Input)</h3><p>由于在不同的情况下, 我们需要向 Vertex Shader 提交不同类型的自定义 Vertex 结构体, 因此需要向 pipeline 描述自定义的顶点格式. </p><img src="https://github.com/CellarCordial/CellarCordial.github.io/blob/master/images/Render%20Hardware%20Interface/1.png?raw=true" alt="1.png" style="zoom:67%;"><ul class="ui list"><li><p><strong>name</strong>: DX12 中需要指定与顶点结构体元素相关联的字符串, 为 D3D12_INPUT_ELEMENT_DESC::SemanticName.</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 如当在 cpu 端指定 position 元素的 Semantic Name 为 POSITION.</span><br><span class="line">// gpu 端应表示如下以供关联.</span><br><span class="line"></span><br><span class="line">struct VertexInput</span><br><span class="line">{</span><br><span class="line">float3 position : POSITION;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>format</strong>: 顶点结构体各个元素的格式, 如上述 position 的类型为 float3, 一般该类型使用 Format::RGB8_FLOAT格式.</p></li><li><p><strong>offset</strong>: 顶点结构体各个元素在结构体当中的位移, 一般直接使用 offsetof() 宏指定.</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Vertex</span><br><span class="line">{</span><br><span class="line">float3 position;// offset 为 0, 即 offsetof(Vertex, position).</span><br><span class="line">float3 normal;// offset 为 12, 即 offsetof(Vertex, normal).</span><br><span class="line">float2 uv;// offset 为 24, 即 offsetof(Vertex, uv).</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>element_stride</strong>: 整个顶点结构体的大小, 一般即为 sizeof(Vertex).</p></li><li><p><strong>array_size</strong>: 在 DX12 中, 其指定 D3D12_INPUT_ELEMENT_DESC::SemanticIndex, 而在 Vulkan 中, 则指定 vk::VertexInputAttributeDescription::location.</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 有些时候顶点不止有一套 texcoord, 就需要用到 大于 1 的 array_size.</span><br><span class="line"></span><br><span class="line">// 当 cpu 端指定 Vertex 和 VertexAttribute 如下:</span><br><span class="line">struct Vertex</span><br><span class="line">{</span><br><span class="line">float3 position;</span><br><span class="line">float3 normal;</span><br><span class="line">float2 uv0;</span><br><span class="line">float2 uv1;</span><br><span class="line">float2 uv2;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">attribute[0].name = "POSITION";</span><br><span class="line">attribute[0].offset = offsetof(Vertex, position);</span><br><span class="line">attribute[2].array_size = 1;</span><br><span class="line">...</span><br><span class="line">attribute[1].name = "NORMAL";</span><br><span class="line">attribute[1].offset = offsetof(Vertex, normal);</span><br><span class="line">attribute[1].array_size = 1;</span><br><span class="line">...</span><br><span class="line">attribute[2].name = "TEXCOORD";</span><br><span class="line">attribute[2].offset = offsetof(Vertex, uv0);</span><br><span class="line">attribute[2].array_size = 3;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 其在 GPU 端需要如下指定:</span><br><span class="line">struct VertexInput</span><br><span class="line">{</span><br><span class="line">float3 position : POSITION;</span><br><span class="line">float3 normal : NORMAL;</span><br><span class="line">float2 uv0 : TEXCOORD0;// SemanticIndex 为 0.</span><br><span class="line">float2 uv1 : TEXCOORD1;// SemanticIndex 为 1.</span><br><span class="line">float2 uv2 : TEXCOORD2;// SemanticIndex 为 2.</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>binding_index</strong>: 在 DX12 中, 其指定 D3D12_INPUT_ELEMENT_DESC::InputSlot; 在 Vulkan 中, 其指定 vk::VertexInputAttributeDescription::binding, 当我们需要使用多个 Vertex Buffer 的时候 (如一个存储 Vertex 数据, 一个存储 Instance 数据), 这就是指定 VertexAttributeDesc 描述哪一个 Vertex Buffer.</p></li><li><p><strong>is_instanced</strong>: 指定其是 Per Vertex 还是 Per Instance. </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 前者所指定的顶点元素在同一个实例内的所有顶点都是不同的, 相同序号的而不同实例的顶点则是相同的, 一般用来指定顶点位置等.</span><br><span class="line">// 后者所指定的顶点元素在同一个实例内都是相同的, 不同实例则不同, 一般用来指定世界矩阵.</span><br><span class="line"></span><br><span class="line">struct VertexInput</span><br><span class="line">{</span><br><span class="line">    float3 position : POSITION;      // Per Vertex</span><br><span class="line">    float4 world0 : WORLD0;          // Per Instance</span><br><span class="line">    float4 world1 : WORLD1;          // Per Instance</span><br><span class="line">    float4 world2 : WORLD2;          // Per Instance</span><br><span class="line">    float4 world3 : WORLD3;          // Per Instance</span><br><span class="line">};</span><br><span class="line">// 此时实例 a 的顶点 1, 顶点 2, 顶点 3...其 position 都不相同 (从 Vertex Buffer 中取数据), </span><br><span class="line">// 而这些顶点的 world0~3 均相同; 实例 a, 实例 b, 实例 c 的顶点 1, 其position 都相同, 而 world0~3 都不相同.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="DX12"><a href="#DX12" class="headerlink" title="DX12"></a>DX12</h4><p>DX12 实现 InputLayoutInterface，我们的成员变量需要 D3D12_INPUT_ELEMENT_DESC 的数组，D3D12_INPUT_LAYOUT_DESC 就直接通过该数组生成；</p><p>在初始化中，将输入的 VertexAttributeDesc 遍历并转换为 D3D12_INPUT_ELEMENT_DESC，与 Vulkan 不同的是，DX12 不需要 VertexAttributeDesc 中的 element_stride。</p><p>同时检查相同 buffe_index 的 VertexAttributeDesc，其 element_stride 也必须相同，即指定同一个 vertex buffer 的所有 VertexAttributeDesc，其所归属的 Vertex 结构体必须相同。</p><p>另外也会将根据 array_size 进行铺平，就是按照 array_size 所指定的数量将同一个 VertexAttributeDesc 复制 array_size 份转换为 D3D12_INPUT_ELEMENT_DESC，每个的 SemanticIndex 递增。</p><img src="https://github.com/CellarCordial/CellarCordial.github.io/blob/master/images/Render%20Hardware%20Interface/2.png?raw=true" alt="2.png" style="zoom:67%;"><p><a class="magnific-img" href="https://github.com/CellarCordial/CellarCordial.github.io/blob/master/images/Render%20Hardware%20Interface/3.png?raw=true"><img src="https://github.com/CellarCordial/CellarCordial.github.io/blob/master/images/Render%20Hardware%20Interface/3.png?raw=true" alt="3.png" class="ui centered image"></a></p><h4 id="Vulkan"><a href="#Vulkan" class="headerlink" title="Vulkan"></a>Vulkan</h4><p>Vulkan 实现 InputLayoutInterface，私有成员需要包含 vk::VertexInputBindingDescription 和 vk::VertexInputAttributeDescription 的数组。与 DX12 不同的是，D3D12_INPUT_ELEMENT_DESC 直接包含了输入装配所需要的所有单个数据，而 Vulkan 将其分成了 vk::VertexInputBindingDescription 和 vk::VertexInputAttributeDescription，前者包含了 buffer_index、 element_stride （DX12 无需此项）、is_instanced，后者包含了 buffer_index、format、offset、array_size。另外，在 DX12 中，array_size 是分开平铺，而 Vulkan中是整体平铺。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// array_size 在 DX12 中对应 SemanticIndex, 在 Vulkan 中对应 location。</span><br><span class="line">struct VertexInput</span><br><span class="line">{</span><br><span class="line">float3 position : POSITION;// array_size 为 1, SemanticIndex 为 0, location 为 0.</span><br><span class="line">float3 normal : NORMAL;// array_size 为 1, SemanticIndex 为 0, location 为 1.</span><br><span class="line">float2 uv0 : TEXCOORD0;// array_size 为 3, SemanticIndex 为 0, location 为 2.</span><br><span class="line">float2 uv1 : TEXCOORD1;// SemanticIndex 为 1, location 为 3. (复制递增)</span><br><span class="line">float2 uv2 : TEXCOORD2;// SemanticIndex 为 2, location 为 4. (复制递增)</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><img src="https://github.com/CellarCordial/CellarCordial.github.io/blob/master/images/Render%20Hardware%20Interface/4.png?raw=true" alt="4.png" style="zoom:67%;"><p><a class="magnific-img" href="https://github.com/CellarCordial/CellarCordial.github.io/blob/master/images/Render%20Hardware%20Interface/5.png?raw=true"><img src="https://github.com/CellarCordial/CellarCordial.github.io/blob/master/images/Render%20Hardware%20Interface/5.png?raw=true" alt="5.png" class="ui centered image"></a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Render Hardware Interface（RHI）简单来说就是一个抽象层，它位于游戏引擎或图形应用和底层图形API（比如DirectX、Vulkan、Metal等）之间，主要作用就是让开发者不用直接去碰那些复杂又容</summary>
      
    
    
    
    
  </entry>
  
</feed>
